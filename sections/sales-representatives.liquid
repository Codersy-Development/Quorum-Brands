{% comment %}sections/sales-representatives-json.liquid{% endcomment %}

<div class="page-width">
  <div class="sales-reps-header text-center margin-bottom-3">
    <h1>{{ section.settings.title }}</h1>
    <div class="rte">{{ section.settings.description }}</div>
  </div>

  <div class="search-filters margin-bottom-3">
    <div class="search-container">
      <input 
        type="text" 
        id="repSearch" 
        class="search-input" 
        placeholder="Search by name or group..."
      >
      <select id="territoryFilter" class="territory-select">
        <option value="">All Territories</option>
      </select>
    </div>
  </div>

  <!-- Results count -->
  <div class="results-info margin-bottom-2">
    <p id="resultsCount"></p>
  </div>

  <!-- Sales rep cards will be generated by JavaScript -->
  <div class="sales-reps-grid" id="repsContainer"></div>

  <div id="noResults" class="no-results" style="display: none;">
    <p>No sales representatives found matching your search criteria.</p>
  </div>

  <!-- Pagination Controls -->
  <div class="pagination" id="paginationContainer" style="display: none;">
    <span class="prev" id="prevPage" style="display: none;">
      <a href="#" title="Previous">
        <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-chevron-left" viewBox="0 0 284.49 498.98">
          <title>icon-chevron</title>
          <path d="M249.49 0a35 35 0 0 1 24.75 59.75L84.5 249.49l189.74 189.74a35.002 35.002 0 0 1-49.5 49.5L10.25 274.24a35 35 0 0 1 0-49.5L224.74 10.25A34.89 34.89 0 0 1 249.49 0Z"></path>
        </svg>
        <span class="icon__fallback-text">Previous</span>
      </a>
    </span>
    
    <div id="pageNumbers"></div>
    
    <span class="next" id="nextPage" style="display: none;">
      <a href="#" title="Next">
        <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-chevron-right" viewBox="0 0 284.49 498.98">
          <title>icon-chevron</title>
          <path d="M35 498.98a35 35 0 0 1-24.75-59.75l189.74-189.74L10.25 59.75a35.002 35.002 0 0 1 49.5-49.5l214.49 214.49a35 35 0 0 1 0 49.5L59.75 488.73A34.89 34.89 0 0 1 35 498.98Z"></path>
        </svg>
        <span class="icon__fallback-text">Next</span>
      </a>
    </span>
  </div>
</div>

<style>
  .search-filters {
    margin-bottom: 30px;
  }

  .search-container {
    display: flex;
    gap: 15px;
    max-width: 800px;
    margin: 0 auto;
  }

  .search-input {
    flex: 1;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }

  .territory-select {
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    min-width: 200px;
  }

  .results-info {
    text-align: center;
    margin-bottom: 20px;
  }

  .results-info p {
    color: #666;
    font-size: 14px;
  }

  .sales-rep-card {
    padding: 20px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    transition: all 0.3s ease;
  }
  
  .sales-rep-card:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .sales-rep-card h3 {
    margin: 0 0 10px 0;
  }
  
  .rep-group {
    color: #666;
    font-style: italic;
    margin-bottom: 10px;
  }
  
  .rep-details {
    margin-top: 15px;
  }
  
  .rep-details p {
    margin: 5px 0;
  }

  .email a {
    text-decoration: none;
  }

  .email a:hover {
    text-decoration: underline;
  }

  .email, .phone, .cell-phone, .website {
    margin: 5px 0;
  }

  .website a {
    color: #0066cc;
    text-decoration: none;
  }

  .website a:hover {
    text-decoration: underline;
  }

  .phone, .cell-phone {
    font-family: monospace;
  }

  .territory {
    position: relative;
    padding: 15px 0;
    margin: 15px 0 !important;
    border-top: 1px solid #998542;
    border-bottom: 1px solid #998542;
  }

  .territory-detail {
    display: block;
    font-style: italic;
    color: #666;
    font-size: 0.8em;
    margin-top: 5px;
  }

  .no-results {
    text-align: center;
    padding: 40px;
    font-size: 18px;
    color: #666;
  }

  /* Pagination Styles */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: baseline;
    gap: 20px;
    margin-top: 40px;
    flex-wrap: wrap;
  }

  .pagination .page {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 4px;
    background: none;
    border: none;
    font-size: 16px;
    line-height: 40px;
    height: 40px;
  }

  .pagination .page a {
    color: #121212;
    text-decoration: none;
    font-weight: normal;
    transition: opacity 0.3s ease;
    line-height: 1;
  }

  .pagination .page a:hover {
    opacity: 0.7;
  }

  .pagination .page.current {
    color: #999999;
    font-weight: normal;
    line-height: 1;
  }

  .pagination .prev,
  .pagination .next {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background-color: #121212;
    border: none;
    cursor: pointer;
    transition: opacity 0.3s ease;
    flex-shrink: 0;
  }

  .pagination .prev:hover,
  .pagination .next:hover {
    opacity: 0.8;
  }

  .pagination .prev a,
  .pagination .next a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    color: #ffffff;
    text-decoration: none;
  }

  .pagination .icon {
    width: 16px;
    height: 16px;
    fill: currentColor;
  }

  .pagination .icon__fallback-text {
    display: none;
  }
  
  @media screen and (min-width: 750px) {
    .sales-reps-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
    }
  }
  
  @media screen and (min-width: 990px) {
    .sales-reps-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media screen and (max-width: 749px) {
    .search-container {
      flex-direction: column;
    }
    
    .territory-select {
      width: 100%;
    }

    .pagination {
      gap: 15px;
    }

    .pagination .page {
      height: 36px;
      line-height: 36px;
    }

    .pagination .prev,
    .pagination .next {
      width: 36px;
      height: 36px;
    }

    .pagination .icon {
      width: 14px;
      height: 14px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Sales rep data - Replace this with your metafield or paste your data here
  const salesRepsData = {{ shop.metafields.custom.sales_reps_data.value | default: '[]' | json }};
  
  // Fallback data if metafield is empty - you can paste your rep data here
  const fallbackData = [
    {
      "sr_name": "AJ Howard",
      "sr_rep_group": "My House Lighting", 
      "sr_position": "Owner",
      "sr_territory": "Oregon, Washington, Montana, Utah",
      "sr_territory_detail": "E-Commerce Sales Only",
      "sr_email": "aj@myhouselighting.com",
      "sr_phone": "(612) 123-4567",
      "sr_cell_phone": "",
      "sr_website": "https://www.myhouselighting.com"
    }
  ];
  
  const allReps = salesRepsData.length > 0 ? salesRepsData : fallbackData;
  
  const repSearch = document.getElementById('repSearch');
  const territoryFilter = document.getElementById('territoryFilter');
  const repsContainer = document.getElementById('repsContainer');
  const noResults = document.getElementById('noResults');
  const paginationContainer = document.getElementById('paginationContainer');
  const pageNumbers = document.getElementById('pageNumbers');
  const prevPage = document.getElementById('prevPage');
  const nextPage = document.getElementById('nextPage');
  const resultsCount = document.getElementById('resultsCount');
  
  const ITEMS_PER_PAGE = {{ section.settings.items_per_page | default: 25 }};
  let currentPage = 1;
  let filteredReps = [];

  function createRepCard(rep) {
    const territories = rep.sr_territory ? rep.sr_territory.split(',').map(t => t.trim()) : [];
    
    return `
      <div class="sales-rep-card" 
           data-territories="${territories.join(',')}"
           data-name="${rep.sr_name || ''}"
           data-group="${rep.sr_rep_group || ''}">
        <h3>${rep.sr_name || 'Sales Representative'}</h3>
        ${rep.sr_rep_group ? `<p class="rep-group">${rep.sr_rep_group}</p>` : ''}
        <div class="rep-details">
          ${rep.sr_position ? `<p class="position">${rep.sr_position}</p>` : ''}
          ${rep.sr_territory ? `
            <p class="territory">
              Territory: ${rep.sr_territory}
              ${rep.sr_territory_detail ? `<span class="territory-detail">${rep.sr_territory_detail}</span>` : ''}
            </p>
          ` : ''}
          ${rep.sr_email ? `<p class="email"><a href="mailto:${rep.sr_email}">${rep.sr_email}</a></p>` : ''}
          ${rep.sr_phone ? `<p class="phone"><strong>Phone:</strong> ${rep.sr_phone}</p>` : ''}
          ${rep.sr_cell_phone ? `<p class="cell-phone"><strong>Cell:</strong> ${rep.sr_cell_phone}</p>` : ''}
          ${rep.sr_website ? `<p class="website"><a href="${rep.sr_website}" target="_blank" rel="noopener">${rep.sr_website.replace(/https?:\/\//, '').replace(/www\./, '')}</a></p>` : ''}
        </div>
      </div>
    `;
  }

  function populateTerritoryFilter() {
    const territories = new Set();
    allReps.forEach(rep => {
      if (rep.sr_territory) {
        rep.sr_territory.split(',').forEach(t => {
          const territory = t.trim();
          if (territory) territories.add(territory);
        });
      }
    });
    
    const sortedTerritories = Array.from(territories).sort();
    territoryFilter.innerHTML = '<option value="">All Territories</option>';
    sortedTerritories.forEach(territory => {
      territoryFilter.innerHTML += `<option value="${territory}">${territory}</option>`;
    });
  }

  function getFilteredReps() {
    const searchTerm = repSearch.value.toLowerCase();
    const selectedTerritory = territoryFilter.value.toLowerCase();
    
    return allReps.filter(rep => {
      const territories = rep.sr_territory ? rep.sr_territory.toLowerCase().split(',').map(t => t.trim()) : [];
      const name = (rep.sr_name || '').toLowerCase();
      const group = (rep.sr_rep_group || '').toLowerCase();
      
      const matchesSearch = name.includes(searchTerm) || group.includes(searchTerm);
      const matchesTerritory = selectedTerritory === '' || territories.some(t => t.includes(selectedTerritory));

      return matchesSearch && matchesTerritory;
    });
  }

  function updateResultsCount() {
    const totalResults = filteredReps.length;
    const startItem = totalResults > 0 ? (currentPage - 1) * ITEMS_PER_PAGE + 1 : 0;
    const endItem = Math.min(currentPage * ITEMS_PER_PAGE, totalResults);
    
    if (totalResults === 0) {
      resultsCount.textContent = 'No representatives found';
    } else if (totalResults <= ITEMS_PER_PAGE) {
      resultsCount.textContent = `Showing all ${totalResults} representatives`;
    } else {
      resultsCount.textContent = `Showing ${startItem}-${endItem} of ${totalResults} representatives`;
    }
  }

  function displayPage() {
    if (filteredReps.length === 0) {
      repsContainer.innerHTML = '';
      noResults.style.display = 'block';
      paginationContainer.style.display = 'none';
      updateResultsCount();
      return;
    }

    noResults.style.display = 'none';
    
    const totalPages = Math.ceil(filteredReps.length / ITEMS_PER_PAGE);
    paginationContainer.style.display = totalPages > 1 ? 'flex' : 'none';

    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const pageReps = filteredReps.slice(startIndex, endIndex);

    repsContainer.innerHTML = pageReps.map(rep => createRepCard(rep)).join('');

    updateResultsCount();
    updatePaginationControls();
  }

  function updatePaginationControls() {
    const totalPages = Math.ceil(filteredReps.length / ITEMS_PER_PAGE);
    
    if (currentPage === 1) {
      prevPage.style.display = 'none';
    } else {
      prevPage.style.display = 'inline-flex';
    }
    
    if (currentPage === totalPages || totalPages === 0) {
      nextPage.style.display = 'none';
    } else {
      nextPage.style.display = 'inline-flex';
    }

    pageNumbers.innerHTML = '';

    if (totalPages <= 1) return;

    const maxVisiblePages = 7;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    if (startPage > 1) {
      addPageNumber(1);
      if (startPage > 2) addEllipsis();
    }

    for (let i = startPage; i <= endPage; i++) {
      addPageNumber(i);
    }

    if (endPage < totalPages) {
      if (endPage < totalPages - 1) addEllipsis();
      addPageNumber(totalPages);
    }
  }

  function addPageNumber(pageNum) {
    const pageSpan = document.createElement('span');
    pageSpan.className = 'page';
    
    if (pageNum === currentPage) {
      pageSpan.classList.add('current');
      pageSpan.textContent = pageNum;
    } else {
      const pageLink = document.createElement('a');
      pageLink.href = '#';
      pageLink.textContent = pageNum;
      pageLink.addEventListener('click', (e) => {
        e.preventDefault();
        goToPage(pageNum);
      });
      pageSpan.appendChild(pageLink);
    }
    
    pageNumbers.appendChild(pageSpan);
  }

  function addEllipsis() {
    const ellipsis = document.createElement('span');
    ellipsis.className = 'page';
    ellipsis.textContent = '…';
    pageNumbers.appendChild(ellipsis);
  }

  function goToPage(pageNum) {
    currentPage = pageNum;
    displayPage();
    repsContainer.scrollIntoView({ behavior: 'smooth' });
  }

  function filterAndPaginate() {
    filteredReps = getFilteredReps();
    currentPage = 1;
    displayPage();
  }

  // Event listeners
  if (repSearch) {
    repSearch.addEventListener('input', filterAndPaginate);
  }
  if (territoryFilter) {
    territoryFilter.addEventListener('change', filterAndPaginate);
  }

  if (prevPage) {
    prevPage.addEventListener('click', (e) => {
      e.preventDefault();
      if (currentPage > 1) goToPage(currentPage - 1);
    });
  }

  if (nextPage) {
    nextPage.addEventListener('click', (e) => {
      e.preventDefault();
      const totalPages = Math.ceil(filteredReps.length / ITEMS_PER_PAGE);
      if (currentPage < totalPages) goToPage(currentPage + 1);
    });
  }

  // Initialize
  populateTerritoryFilter();
  filterAndPaginate();
  
  console.log('Sales reps loaded:', allReps.length);
});
</script>

{% schema %}
{
  "name": "Sales Repr (JSON)",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Sales Representatives"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Contact our professional sales team for assistance</p>"
    },
    {
      "type": "number",
      "id": "items_per_page",
      "label": "Representatives per page",
      "default": 25,
      "info": "Number of representatives to show per page"
    }
  ],
  "presets": [
    {
      "name": "Sales Representatives (JSON)"
    }
  ]
}
{% endschema %}