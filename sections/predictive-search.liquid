{%- if predictive_search.performed -%}
  {%- if predictive_search.resources.products.size > 0 -%}
    <div data-type-products>
      {%- for product in predictive_search.resources.products -%}
        {%- capture wlm_check -%}{%- render 'wlm-product' with product , wlm_is_render:'yes' -%}{%- endcapture -%}{%- if wlm_check == blank -%}{%continue%}{%- endif -%}
        <div class="predictive-product-wrapper" data-vendor="{{ product.vendor | downcase }}" data-product-id="{{ product.id }}">
          {%- render 'product-grid-item',
            product: product,
            per_row: 4,
            quick_shop_enable: settings.quick_shop_enable
          -%}
        </div>
      {%- endfor -%}
    </div>
  {% endif %}
  {%- if predictive_search.resources.collections.size > 0 -%}
    <div data-type-collections>
      <p class="h6 predictive__label">{{ 'general.search.collections' | t }}</p>
      <ul class="no-bullets">
        {% for collection in predictive_search.resources.collections %}
          {%- capture wlm_check -%}{%- render 'wlm-collection' with collection , wlm_is_render:'yes' -%}{%- endcapture -%}{%- if wlm_check == blank -%}{%continue%}{%- endif -%}
          <li>
            <a href="{{ collection.url }}">
              {{ collection.title }}
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}
  {%- if predictive_search.resources.pages.size > 0 -%}
    <div data-type-pages>
      <p class="h6 predictive__label">{{ 'general.search.pages' | t }}</p>
      <ul class="no-bullets">
        {%- for page in predictive_search.resources.pages -%}
          <li>
            <a href="{{ page.url }}">
              {{ page.title }}
            </a>
          </li>
        {%- endfor -%}
      </ul>
    </div>
  {% endif %}
  {%- if predictive_search.resources.articles.size > 0 -%}
    <div data-type-articles="{{ predictive_search.resources.articles.size }}">
      <p class="h6 predictive__label">{{ 'general.search.articles' | t }}</p>
      {%- for article in predictive_search.resources.articles -%}
        <div class="grid__item grid-product small--one-half medium-up--one-quarter" data-aos="row-of-4">
          <a href="{{ article.url }}" class="grid-product__link grid-product__link--inline">
            <div class="image-wrap">
              <div
                class="grid__image-ratio grid__image-ratio--square">
                {%- render 'image-element',
                  img: article.image,
                  widths: '360, 540, 720, 900, 1080',
                  sizes: '80px',
                -%}
              </div>
            </div>
            <div class="grid-product__meta">
              {{ article.title }}
            </div>
          </a>
        </div>
      {%- endfor -%}
    </div>
  {% endif %}
{%- endif -%}

{% unless request.design_mode %}
<script>
  // Filter predictive search products based on selected store
  function filterPredictiveSearchProducts() {
    const selectedStore = localStorage.getItem("store-selected") || "";
    
    // Target the products container in predictive search
    const productsContainer = document.querySelector('[data-type-products]');
    if (!productsContainer) {
      return;
    }
    
    // Look for product wrappers with vendor data
    const productWrappers = productsContainer.querySelectorAll('.predictive-product-wrapper');
    
    let visibleCount = 0;
    let hiddenCount = 0;
    
    productWrappers.forEach((wrapper, index) => {
      const productVendor = wrapper.dataset.vendor || "";
      
      
      // Allow products to show when "Shop All Brands" is selected
      const shouldShow = selectedStore.toLowerCase().includes("shop all") || 
                        productVendor === selectedStore.toLowerCase() ||
                        selectedStore === ''; // Show all if no store selected
      
      if (shouldShow) {
        wrapper.style.display = '';
        visibleCount++;
      } else {
        wrapper.style.display = 'none';
        hiddenCount++;
      }
    });
    
    
    // Hide the entire products section if no products match
    if (visibleCount === 0) {
      productsContainer.style.display = 'none';
    } else {
      productsContainer.style.display = '';
    }
  }
  
  // Monitor for predictive search results appearing
  const predictiveObserver = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        // Check if products were added to predictive search
        const hasProducts = Array.from(mutation.addedNodes).some(node => 
          node.nodeType === 1 && (
            (node.querySelector && node.querySelector('[data-type-products]')) ||
            (node.dataset && node.dataset.typeProducts !== undefined) ||
            node.classList.contains('predictive-product-wrapper')
          )
        );
        
        if (hasProducts) {
 
          setTimeout(filterPredictiveSearchProducts, 50);
        }
      }
    });
  });
  
  // Start observing the predictive search container
  const predictiveContainer = document.getElementById('predictive-search');
  if (predictiveContainer) {
    predictiveObserver.observe(predictiveContainer, { 
      childList: true, 
      subtree: true 
    });
 
  }
  
  // Also listen for store changes
  document.addEventListener('change', function(e) {
    if (e.target.matches('store-switcher input[type="radio"]') || 
        (e.target.type === 'radio' && e.target.closest('store-switcher')) ||
        (e.target.type === 'radio' && e.target.name && e.target.name.startsWith('store-switcher-'))) {
      

      setTimeout(filterPredictiveSearchProducts, 100);
    }
  });
  
  // Listen for clicks on store switcher as backup
  document.addEventListener('click', function(e) {
    const storeLabel = e.target.closest('store-switcher label');
    if (storeLabel) {

      setTimeout(filterPredictiveSearchProducts, 150);
    }
  });
  
  // Initial filter attempt on page load
  setTimeout(filterPredictiveSearchProducts, 200);
</script>
{% endunless %}