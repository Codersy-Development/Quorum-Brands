{%- liquid
  assign recommend_products = true
  if recommendations.products and recommendations.products_count > 0
    assign related_collection = recommendations
  endif
  assign number_of_products = section.settings.related_count
-%}
<product-recommendations
  id="Recommendations-{{ section.id }}"
  data-section-id="{{ section.id }}"
  data-section-type="product-recommendations"
  data-enable="{{ recommend_products }}"
  data-product-id="{{ product.id }}"
  data-intent="related"
  data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ number_of_products }}"
  data-limit="{{ number_of_products }}">
  <div
    data-section-id="{{ product.id }}"
    data-subsection
    data-section-type="collection-grid"
    class="index-section">
    <div class="page-width">
      <header class="section-header">
        <h3 class="section-header__title" id="recommendations-title-{{ section.id }}">
          {{ section.settings.product_recommendations_heading }}
        </h3>
      </header>
    </div>
    <div class="page-width page-width--flush-small">
      <div class="grid-overflow-wrapper">
        {%- if recommend_products -%}
          <div class="product-recommendations-placeholder">
            {% comment %}
              This content is visually hidden and replaced when recommended products show up
            {% endcomment %}
            <div class="grid grid--uniform visually-invisible" aria-hidden="true">
              {%- render 'product-grid-item',
                product: product,
                quick_shop_enable: settings.quick_shop_enable
              -%}
            </div>
          </div>
        {%- endif -%}
        {%- if related_collection.products_count > 0 -%}
          <div class="product-recommendations page-width">
            <div class="grid grid--uniform" data-aos="overflow__animation">
              {%- for product in related_collection.products limit: number_of_products -%}
                {% comment %} On smaller screen sizes, 39vw is used for grid items in the CSS {% endcomment %}
                {%- render 'product-grid-item',
                  product: product,
                  per_row: section.settings.products_per_row,
                  quick_shop_enable: settings.quick_shop_enable,
                  fallback: '39vw',
                -%}
              {%- endfor -%}
            </div>
          </div>
        {%- endif -%}
      </div>
    </div>
  </div>
</product-recommendations>

<style>
.recommendations-vendor {
  font-size: 0.85em;
  color: #666;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: 4px;
  font-weight: 500;
}

.recommendations-vendor--oxygen {
  color: #0066cc;
}

.recommendations-vendor--quorum {
  color: #cc6600;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const recommendationsSection = document.querySelector('#Recommendations-{{ section.id }}');
  if (!recommendationsSection) {
    console.log('❌ Product recommendations section not found');
    return;
  }
  
  const sectionId = '{{ section.id }}';
  const titleElement = document.getElementById('recommendations-title-' + sectionId);
  
  console.log('=== PRODUCT RECOMMENDATIONS DEBUG ===');
  console.log('Section found:', !!recommendationsSection);
  console.log('Title element found:', !!titleElement);
  
  function addVendorToRecommendations() {
    const recommendationsContainer = recommendationsSection.querySelector('.grid.grid--uniform[data-aos="overflow__animation"], .grid.grid--uniform:not(.visually-invisible)');
    
    if (!recommendationsContainer) {
      console.log('❌ Recommendations container not found');
      return;
    }
    
    const productItems = recommendationsContainer.querySelectorAll('.grid__item.grid-product, .grid-product');
    
    console.log(`Adding vendor display to ${productItems.length} recommended products`);
    
    productItems.forEach((item, index) => {
      // Skip if vendor already added
      if (item.querySelector('.recommendations-vendor')) {
        return;
      }
      
      let productVendor = '';
      let productUrl = '';
      
      // Try to get product URL for vendor inference
      const productLink = item.querySelector('.grid-product__link, a[href*="/products/"]');
      if (productLink) {
        productUrl = productLink.href || productLink.getAttribute('href');
        console.log(`Recommended product ${index + 1} URL:`, productUrl);
      }
      
      // Method 1: Check data attributes
      if (item.dataset.vendor) {
        productVendor = item.dataset.vendor;
        console.log(`Recommended product ${index + 1} vendor from data-vendor:`, productVendor);
      }
      
      // Method 2: Look for existing vendor element
      if (!productVendor) {
        const vendorElement = item.querySelector('.grid-product__vendor, [class*="vendor"]');
        if (vendorElement) {
          productVendor = vendorElement.textContent.trim();
          console.log(`Recommended product ${index + 1} vendor from element:`, productVendor);
        }
      }
      
      // Method 3: Check product URL for vendor patterns
      if (!productVendor && productUrl) {
        // Look for vendor patterns in the URL path
        if (productUrl.includes('/collections/oxygen') || productUrl.includes('vendor=oxygen')) {
          productVendor = 'Oxygen';
          console.log(`Recommended product ${index + 1} vendor from URL pattern: Oxygen`);
        } else if (productUrl.includes('/collections/quorum') || productUrl.includes('vendor=quorum')) {
          productVendor = 'Quorum';
          console.log(`Recommended product ${index + 1} vendor from URL pattern: Quorum`);
        }
      }
      
      // Method 4: Check if we can extract vendor from product data in the DOM
      if (!productVendor) {
        // Look for any script tags or data that might contain product info
        const productData = item.querySelector('[data-product-json], script[type="application/json"]');
        if (productData) {
          try {
            const productInfo = JSON.parse(productData.textContent || productData.innerHTML);
            if (productInfo.vendor) {
              productVendor = productInfo.vendor;
              console.log(`Recommended product ${index + 1} vendor from JSON data:`, productVendor);
            }
          } catch (error) {
            // Silent fail - not all products will have this data
          }
        }
      }
      
      // Method 5: Text scanning in product title and content
      if (!productVendor) {
        const titleElement = item.querySelector('.grid-product__title');
        const metaElement = item.querySelector('.grid-product__meta');
        
        let searchText = '';
        if (titleElement) searchText += titleElement.textContent.toLowerCase() + ' ';
        if (metaElement) searchText += metaElement.textContent.toLowerCase() + ' ';
        
        console.log(`Recommended product ${index + 1} text content:`, searchText.substring(0, 100));
        
        if (searchText.includes('oxygen')) {
          productVendor = 'Oxygen';
          console.log(`Recommended product ${index + 1} vendor from text scan: Oxygen`);
        } else if (searchText.includes('quorum')) {
          productVendor = 'Quorum';
          console.log(`Recommended product ${index + 1} vendor from text scan: Quorum`);
        }
      }
      
      // Add vendor display if we found one
      if (productVendor) {
        // Store vendor in data attribute for filtering
        item.dataset.inferredVendor = productVendor;
        
        // Find the best place to insert vendor - look for product meta area
        let insertTarget = null;
        
        const metaElement = item.querySelector('.grid-product__meta');
        if (metaElement) {
          insertTarget = metaElement.firstElementChild;
        } else {
          // Fallback to title element
          const titleElement = item.querySelector('.grid-product__title');
          if (titleElement) {
            insertTarget = titleElement;
          }
        }
        
        if (insertTarget) {
          const vendorElement = document.createElement('div');
          vendorElement.className = `recommendations-vendor recommendations-vendor--${productVendor.toLowerCase()}`;
          vendorElement.textContent = productVendor;
          
          // Insert before the target element
          insertTarget.parentNode.insertBefore(vendorElement, insertTarget);
          
          console.log(`✓ Added vendor "${productVendor}" to recommended product ${index + 1}`);
        } else {
          console.log(`❌ Could not find insertion point for recommended product ${index + 1}`);
        }
      } else {
        console.log(`❌ No vendor found for recommended product ${index + 1}`);
        
        // Debug: Show what we found
        console.log(`  - URL: ${productUrl}`);
        console.log(`  - Text content preview: ${item.textContent.substring(0, 100)}`);
      }
    });
  }
  
  function debugRecommendationsState() {
    console.log('=== DEBUGGING RECOMMENDATIONS STATE ===');
    
    const selectedStore = localStorage.getItem("store-selected") || "";
    console.log('Selected store from localStorage:', selectedStore);
    
    const recommendationsContainer = recommendationsSection.querySelector('.grid.grid--uniform[data-aos="overflow__animation"], .grid.grid--uniform:not(.visually-invisible)');
    
    if (!recommendationsContainer) {
      console.log('❌ Recommendations container not found');
      return;
    }
    
    // Check what's in the container
    const allChildren = recommendationsContainer.children;
    console.log('Children in recommendations container:', allChildren.length);
    
    for (let i = 0; i < allChildren.length; i++) {
      const child = allChildren[i];
      console.log(`Child ${i + 1}:`, child.tagName, child.className, 'Style:', child.style.display);
    }
    
    // Find all potential product items
    const productItems = recommendationsContainer.querySelectorAll('.grid__item.grid-product, .grid-product');
    console.log('Recommendation product items found:', productItems.length);
    
    productItems.forEach((item, index) => {
      console.log(`=== Recommendation Product Item ${index + 1} ===`);
      console.log('Element:', item.tagName, item.className);
      console.log('Display style:', item.style.display);
      console.log('All data attributes:');
      
      Array.from(item.attributes).forEach(attr => {
        if (attr.name.startsWith('data-')) {
          console.log(`  ${attr.name}: ${attr.value}`);
        }
      });
      
      // Look for vendor info
      const vendorElement = item.querySelector('.grid-product__vendor, [class*="vendor"], .recommendations-vendor');
      if (vendorElement) {
        console.log('Vendor element found:', vendorElement.textContent.trim());
      } else {
        console.log('No vendor element found');
      }
      
      // Check text content for vendor names
      const itemText = item.textContent.toLowerCase();
      console.log('Contains "oxygen":', itemText.includes('oxygen'));
      console.log('Contains "quorum":', itemText.includes('quorum'));
      console.log('First 100 chars of text:', itemText.substring(0, 100));
    });
  }
  
  function filterRecommendations() {
    const selectedStore = localStorage.getItem("store-selected") || "";
    
    console.log('=== FILTERING RECOMMENDATIONS ===');
    console.log('Selected store:', selectedStore);
    
    const recommendationsContainer = recommendationsSection.querySelector('.grid.grid--uniform[data-aos="overflow__animation"], .grid.grid--uniform:not(.visually-invisible)');
    
    if (!recommendationsContainer) {
      console.log('❌ Recommendations container not found, skipping filter');
      return;
    }
    
    // Update section title
    if (titleElement) {
      let titleText = "{{ section.settings.product_recommendations_heading }}";
      if (selectedStore && !selectedStore.toLowerCase().includes("shop all")) {
        const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
        titleText = `${capitalizedStore} Product Recommendations`;
      }
      titleElement.textContent = titleText;
      console.log('Updated recommendations title to:', titleText);
    }
    
    // Find all product items
    const productItems = recommendationsContainer.querySelectorAll('.grid__item.grid-product, .grid-product');
    
    console.log(`Found ${productItems.length} recommendation product items to filter`);
    
    if (productItems.length === 0) {
      console.log('❌ No recommendation product items found - might not be loaded yet');
      return;
    }
    
    let visibleCount = 0;
    let hiddenCount = 0;
    
    productItems.forEach((item, index) => {
      let productVendor = '';
      
      // Try multiple methods to get vendor
      if (item.dataset.vendor) {
        productVendor = item.dataset.vendor.toLowerCase();
        console.log(`Recommendation product ${index + 1} vendor from data-vendor:`, productVendor);
      } else if (item.dataset.inferredVendor) {
        productVendor = item.dataset.inferredVendor.toLowerCase();
        console.log(`Recommendation product ${index + 1} vendor from inferred data:`, productVendor);
      } else {
        // Look for vendor element (including our added one)
        const vendorElement = item.querySelector('.grid-product__vendor, [class*="vendor"], .recommendations-vendor');
        if (vendorElement) {
          productVendor = vendorElement.textContent.trim().toLowerCase();
          console.log(`Recommendation product ${index + 1} vendor from element:`, productVendor);
        } else {
          // Scan text for vendor names
          const itemText = item.textContent.toLowerCase();
          if (itemText.includes('oxygen')) {
            productVendor = 'oxygen';
            console.log(`Recommendation product ${index + 1} vendor from text scan: oxygen`);
          } else if (itemText.includes('quorum')) {
            productVendor = 'quorum';
            console.log(`Recommendation product ${index + 1} vendor from text scan: quorum`);
          } else {
            console.log(`Recommendation product ${index + 1} vendor: UNKNOWN`);
          }
        }
      }
      
      // Determine visibility
      let shouldShow = false;
      
      if (!selectedStore || selectedStore === '') {
        shouldShow = true;
        console.log(`Recommendation product ${index + 1}: Showing (no store selected)`);
      } else if (selectedStore.toLowerCase().includes("shop all")) {
        shouldShow = true;
        console.log(`Recommendation product ${index + 1}: Showing (shop all selected)`);
      } else if (productVendor === selectedStore.toLowerCase()) {
        shouldShow = true;
        console.log(`Recommendation product ${index + 1}: Showing (vendor matches: ${productVendor})`);
      } else {
        shouldShow = false;
        if (!productVendor) {
          console.log(`Recommendation product ${index + 1}: Hiding (unknown vendor - ${selectedStore.toLowerCase()} store selected)`);
        } else {
          console.log(`Recommendation product ${index + 1}: Hiding (vendor mismatch: ${productVendor} vs ${selectedStore.toLowerCase()})`);
        }
      }
      
      if (shouldShow) {
        item.style.display = '';
        visibleCount++;
      } else {
        item.style.display = 'none';
        hiddenCount++;
      }
    });
    
    console.log(`Recommendations filtering complete: ${visibleCount} visible, ${hiddenCount} hidden`);
    
    // Hide section if no visible products and store is selected
    const sectionElement = recommendationsSection.querySelector('.index-section');
    if (sectionElement) {
      if (visibleCount === 0 && selectedStore && !selectedStore.toLowerCase().includes("shop all")) {
        sectionElement.style.display = 'none';
        console.log('❌ Hiding recommendations section - no matching products for selected store');
      } else {
        sectionElement.style.display = '';
        console.log('✓ Recommendations section visible');
      }
    }
  }
  
  function handleRecommendationsUpdate() {
    console.log('🔄 Recommendations updated, adding vendors and filtering...');
    setTimeout(function() {
      addVendorToRecommendations();
      debugRecommendationsState();
      filterRecommendations();
    }, 100);
  }
  
  // Listen for store changes
  document.addEventListener('change', function(e) {
    if (e.target.matches('store-switcher input[type="radio"]') || 
        (e.target.type === 'radio' && e.target.closest('store-switcher')) ||
        (e.target.type === 'radio' && e.target.name && e.target.name.startsWith('store-switcher-'))) {
      
      console.log('🔄 Store changed, re-filtering recommendations...');
      setTimeout(function() {
        debugRecommendationsState();
        filterRecommendations();
      }, 100);
    }
  });
  
  // Wait for recommendations to load and then process them
  const checkRecommendations = function() {
    const recommendationsContainer = recommendationsSection.querySelector('.grid.grid--uniform[data-aos="overflow__animation"], .grid.grid--uniform:not(.visually-invisible)');
    
    if (recommendationsContainer && recommendationsContainer.children.length > 0) {
      console.log('✓ Recommendations loaded, processing...');
      handleRecommendationsUpdate();
      return true;
    }
    return false;
  };
  
  // Initial check after a delay
  setTimeout(function() {
    if (!checkRecommendations()) {
      console.log('⏳ Recommendations not loaded yet, will monitor...');
    }
  }, 1000);
  
  // Monitor for changes to recommendations container
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'childList') {
        const target = mutation.target;
        
        // Check if this is a recommendations container being populated
        if (target.matches && (target.matches('.grid.grid--uniform') || target.closest('product-recommendations'))) {
          console.log('🔄 Recommendations container updated');
          handleRecommendationsUpdate();
        }
      }
    });
  });
  
  // Observe the entire recommendations section for changes
  observer.observe(recommendationsSection, { 
    childList: true, 
    subtree: true 
  });
  
  console.log('✓ Observer attached to recommendations section');
  
  // Expose debug functions
  window.debugRecommendations = debugRecommendationsState;
  window.addVendorToRecommendations = addVendorToRecommendations;
});
</script>

{% schema %}
{
  "name": "t:sections.product-recommendations.name",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.product-recommendations.settings.show_product_recommendations.info"
    },
    {
      "type": "text",
      "id": "product_recommendations_heading",
      "label": "t:sections.product-recommendations.settings.product_recommendations_heading.label",
      "default": "You may also like"
    },
    {
      "type": "range",
      "id": "related_count",
      "label": "t:sections.product-recommendations.settings.related_count.label",
      "default": 6,
      "min": 2,
      "max": 6,
      "step": 1
    },
    {
      "type": "range",
      "id": "products_per_row",
      "label": "t:sections.product-recommendations.settings.products_per_row.label",
      "default": 3,
      "min": 2,
      "max": 5,
      "step": 1
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor name",
      "default": true
    }
  ],
  "disabled_on": {
    "groups": ["footer", "header", "custom.popups"]
  }
}
{% endschema %}