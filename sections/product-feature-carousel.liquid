{{ 'custom-product-slider-carousel.css' | asset_url | stylesheet_tag }}
<section
    class="product-feature-carousel room-feature"
    {% unless section.settings.store == "all" %}
        data-store="{{ section.settings.store }}"
    {% endunless %}
>
    <div class="container">
        <div class="feature-grid">
            <!-- Main Large Image - Changes with carousel -->
            <div class="feature-left">
                {% assign first_block = section.blocks[0] %}
                <div class="main-image-container">
                    {% if first_block.settings.main_image_url %}
                        <a href="{{ first_block.settings.main_image_url }}" target="_blank" rel="noopener" class="main-image-link" id="mainImageLink">
                            <img id="mainImageDynamic" src="{{ first_block.settings.main_image | img_url: 'master' }}" alt="Main Room Image" class="main-image">
                        </a>
                    {% else %}
                        <img id="mainImageDynamic" src="{{ first_block.settings.main_image | img_url: 'master' }}" alt="Main Room Image" class="main-image">
                    {% endif %}
                </div>
            </div>

            <!-- Product Card Carousel -->
            <div class="feature-right">
                <div class="feature-card">
                    <div class="card-swiper swiper">
                        <div class="swiper-wrapper">
                            {% for block in section.blocks %}
                                <div class="swiper-slide product-card" 
                                     data-main-image="{{ block.settings.main_image | img_url: 'master' }}"
                                     data-main-image-url="{{ block.settings.main_image_url }}"
                                     data-slide-number="{{ forloop.index }}"
                                     {{ block.shopify_attributes }}>
                                    
                                    <!-- Card Image Section -->
                                    {% if block.settings.card_image %}
                                        <div class="card-image-section">
                                            {% if block.settings.card_image_url %}
                                                <a href="{{ block.settings.card_image_url }}" target="_blank" rel="noopener" class="card-image-link">
                                                    <img src="{{ block.settings.card_image | img_url: 'master' }}" alt="Product Image" class="card-image">
                                                </a>
                                            {% else %}
                                                <img src="{{ block.settings.card_image | img_url: 'master' }}" alt="Product Image" class="card-image">
                                            {% endif %}
                                        </div>
                                    {% endif %}

                                    <!-- Card Content Section -->
                                    <div class="card-content">
                                        {% if block.settings.heading %}
                                            <h2 class="card-title">{{ block.settings.heading }}</h2>
                                        {% endif %}
                                        {% if block.settings.text %}
                                            <p class="card-text">{{ block.settings.text }}</p>
                                        {% endif %}
                                        {% if block.settings.button_label and block.settings.button_link %}
                                            <a href="{{ block.settings.button_link }}" class="card-button">{{ block.settings.button_label }}</a>
                                        {% endif %}
                                    </div>
                                </div>
                            {% endfor %}
                        </div>

                        <!-- Navigation Controls -->
                        <div class="product-button-wrapper">
                            <div class="product-button-prev" id="prevButton">
                                <!-- Option 1: CSS Arrows (currently active) -->
                                
                                <!-- Option 2: SVG Icons (uncomment if you have the SVG file) -->
                                <!-- <img src="{{ 'ico-arrow-right.svg' | asset_url }}" alt="Previous" style="transform: rotate(180deg);"> -->
                            </div>
                            <div class="product-button-next" id="nextButton">
                                <!-- Option 1: CSS Arrows (currently active) -->
                                
                                <!-- Option 2: SVG Icons (uncomment if you have the SVG file) -->
                                <!-- <img src="{{ 'ico-arrow-right.svg' | asset_url }}" alt="Next"> -->
                            </div>
                        </div>

                        <!-- Slide Counter -->
                        <div class="slide-counter">
                            <span class="current-slide">1</span> / <span class="total-slides">{{ section.blocks.size }}</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper@8/swiper-bundle.min.js"></script>



<script>
let currentSlideIndex = 0;
let slideData = [];
let totalSlides = 0;
let swiperInstance = null;

document.addEventListener('DOMContentLoaded', function () {
    console.log('=== CAROUSEL INITIALIZATION ===');
    
    // Wait a bit for DOM to be fully ready
    setTimeout(initializeCarousel, 100);
});

function initializeCarousel() {
    const mainImage = document.getElementById('mainImageDynamic');
    const swiperContainer = document.querySelector('.card-swiper');
    
    if (!mainImage) {
        console.error('Main image element not found');
        return;
    }

    if (!swiperContainer) {
        console.error('Swiper container not found');
        return;
    }

    // Collect slide data from the DOM
    const slides = document.querySelectorAll('.swiper-slide[data-main-image]');
    totalSlides = slides.length;
    
    console.log('Found', totalSlides, 'slides');
    
    if (totalSlides === 0) {
        console.error('No slides found with data-main-image attribute');
        return;
    }
    
    slideData = [];
    slides.forEach((slide, index) => {
        const imageUrl = slide.getAttribute('data-main-image');
        const linkUrl = slide.getAttribute('data-main-image-url');
        slideData.push({
            imageUrl: imageUrl,
            linkUrl: linkUrl,
            slideNumber: index + 1
        });
        console.log(`Slide ${index + 1}: Image = ${imageUrl}, Link = ${linkUrl}`);
    });

    // Initialize Swiper
    swiperInstance = new Swiper('.card-swiper', {
        slidesPerView: 1,
        spaceBetween: 0,
        navigation: {
            nextEl: '.product-button-next',
            prevEl: '.product-button-prev',
        },
        loop: false,
        effect: 'slide',
        speed: 400,
        allowTouchMove: true,
        watchSlidesProgress: true,
        on: {
            init: function() {
                console.log('Swiper initialized');
                updateMainImageFromIndex(0);
                updateSlideCounter();
            },
            slideChange: function() {
                console.log('Swiper slide changed to:', this.activeIndex);
                currentSlideIndex = this.activeIndex;
                updateMainImageFromIndex(currentSlideIndex);
                updateSlideCounter();
            },
            slideChangeTransitionEnd: function() {
                console.log('Slide transition ended, current index:', this.activeIndex);
            }
        }
    });

    // Store swiper globally for debugging
    window.mySwiper = swiperInstance;

    // Add manual click handlers as backup
    const nextButton = document.querySelector('.product-button-next');
    const prevButton = document.querySelector('.product-button-prev');
    
    if (nextButton) {
        nextButton.addEventListener('click', function() {
            console.log('Next button clicked manually');
            if (swiperInstance) {
                swiperInstance.slideNext();
            }
        });
    }
    
    if (prevButton) {
        prevButton.addEventListener('click', function() {
            console.log('Prev button clicked manually');
            if (swiperInstance) {
                swiperInstance.slidePrev();
            }
        });
    }

    console.log('Carousel initialized successfully with', totalSlides, 'slides');
}

// Function to update main image based on index
function updateMainImageFromIndex(index) {
    console.log('=== UPDATING MAIN IMAGE ===');
    console.log('Target index:', index);
    
    const mainImage = document.getElementById('mainImageDynamic');
    if (!mainImage) {
        console.error('Main image element not found during update');
        return;
    }

    if (index < 0 || index >= slideData.length) {
        console.error('Invalid index:', index, 'Available slides:', slideData.length);
        return;
    }

    const slideInfo = slideData[index];
    if (!slideInfo) {
        console.error('No slide data found for index:', index);
        return;
    }

    console.log('Current main image src:', mainImage.src);
    console.log('New image URL:', slideInfo.imageUrl);
    console.log('New link URL:', slideInfo.linkUrl);
    
    // Change the main image with fade effect
    if (slideInfo.imageUrl && slideInfo.imageUrl !== mainImage.src) {
        mainImage.style.opacity = '0.3';
        
        setTimeout(() => {
            mainImage.src = slideInfo.imageUrl;
            mainImage.style.opacity = '1';
            console.log('✅ Main image updated successfully');
            
            // Update the link
            updateMainImageLink(slideInfo.linkUrl);
        }, 150);
    } else {
        console.log('Image unchanged or empty URL');
        // Still update the link in case it changed
        updateMainImageLink(slideInfo.linkUrl);
    }
}

// Function to update slide counter
function updateSlideCounter() {
    const currentSlideElement = document.querySelector('.current-slide');
    if (currentSlideElement) {
        const displayNumber = currentSlideIndex + 1;
        currentSlideElement.textContent = displayNumber;
        console.log('Updated counter to:', displayNumber);
    }
}

// Function to update main image link
function updateMainImageLink(newUrl) {
    const mainImage = document.getElementById('mainImageDynamic');
    const mainImageContainer = document.querySelector('.main-image-container');
    const existingLink = mainImageContainer.querySelector('.main-image-link');
    
    console.log('Updating main image link to:', newUrl);
    
    if (newUrl && newUrl.trim() !== '') {
        if (existingLink) {
            existingLink.href = newUrl;
            console.log('✅ Updated existing link to:', newUrl);
        } else {
            // Create new link wrapper
            const link = document.createElement('a');
            link.href = newUrl;
            link.target = '_blank';
            link.rel = 'noopener';
            link.className = 'main-image-link';
            link.id = 'mainImageLink';
            
            // Wrap the image
            mainImage.parentNode.insertBefore(link, mainImage);
            link.appendChild(mainImage);
            console.log('✅ Created new link:', newUrl);
        }
    } else {
        if (existingLink) {
            // Remove link wrapper, keep image
            const parent = existingLink.parentNode;
            parent.insertBefore(mainImage, existingLink);
            parent.removeChild(existingLink);
            console.log('✅ Removed link wrapper (no URL provided)');
        }
    }
}

// Test function for debugging - can be called from browser console
function goToSlide(slideNumber) {
    console.log('=== MANUAL SLIDE NAVIGATION ===');
    console.log('Going to slide:', slideNumber);
    const index = slideNumber - 1;
    if (index >= 0 && index < totalSlides && swiperInstance) {
        swiperInstance.slideTo(index);
    } else {
        console.error('Invalid slide number or swiper not initialized');
    }
}

// Debug function - can be called from browser console
function debugCarousel() {
    console.log('=== CAROUSEL DEBUG INFO ===');
    console.log('Total slides:', totalSlides);
    console.log('Current slide index:', currentSlideIndex);
    console.log('Slide data:', slideData);
    console.log('Swiper instance:', swiperInstance);
    if (swiperInstance) {
        console.log('Swiper active index:', swiperInstance.activeIndex);
        console.log('Swiper slides length:', swiperInstance.slides.length);
    }
}
</script>

{% schema %}
{
  "name": "Product Feature Carousel",
  "tag": "section",
  "class": "room-feature-carousel",
  "settings": [
    {
      "type": "select",
      "id": "store",
      "label": "Store",
      "info": "Populate this to show only on specific store",
      "options": [
        { "value": "all", "label": "Show On Both" },
        { "value": "explore all brands", "label": "Explore All Brands" },
        { "value": "quorum", "label": "Quorum" },
        { "value": "oxygen", "label": "Oxygen" }
      ],
      "default": "all"
    }
  ],
  "blocks": [
    {
      "type": "card_slide",
      "name": "Product Card",
      "settings": [
        {
          "type": "header",
          "content": "Main Large Image (Left Side)"
        },
        {
          "type": "image_picker",
          "id": "main_image",
          "label": "Main Large Image",
          "info": "This image displays on the left and changes with each card"
        },
        {
          "type": "url",
          "id": "main_image_url",
          "label": "Main Image URL",
          "info": "Make the main large image clickable - opens in new tab"
        },
        {
          "type": "header",
          "content": "Card Image (Right Side)"
        },
        {
          "type": "image_picker",
          "id": "card_image",
          "label": "Card Image",
          "info": "This image displays in the card on the right side"
        },
        {
          "type": "url",
          "id": "card_image_url",
          "label": "Card Image URL",
          "info": "Make the card image clickable - opens in new tab"
        },
        {
          "type": "header",
          "content": "Card Content"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading Text",
          "default": "Shop by Room: Dining"
        },
        {
          "type": "textarea",
          "id": "text",
          "label": "Paragraph Text",
          "default": "Designed to enhance every meal, our dining selection combines timeless style with thoughtful functionality."
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "Button Label",
          "default": "Explore Products"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Feature Carousel"
    }
  ]
}
{% endschema %}