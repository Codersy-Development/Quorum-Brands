{{ 'custom-product-slider-carousel.css' | asset_url | stylesheet_tag }}
<section
    class="product-feature-carousel room-feature"
    {% unless section.settings.store == "all" %}
        data-store="{{ section.settings.store }}"
    {% endunless %}
>
    <div class="container">
        <div class="feature-grid">
            <!-- Main Large Image - Changes with carousel -->
            <div class="feature-left">
                {% assign first_block = section.blocks[0] %}
                <div class="main-image-container">
                    {% if first_block.settings.main_image_url %}
                        <a href="{{ first_block.settings.main_image_url }}" target="_blank" rel="noopener" class="main-image-link">
                            <img src="{{ first_block.settings.main_image | img_url: 'master' }}" alt="Main Room Image" class="main-image">
                        </a>
                    {% else %}
                        <img src="{{ first_block.settings.main_image | img_url: 'master' }}" alt="Main Room Image" class="main-image">
                    {% endif %}
                </div>
            </div>

            <!-- Product Card Carousel -->
            <div class="feature-right">
                <div class="feature-card">
                    <div class="card-swiper swiper">
                        <div class="swiper-wrapper">
                            {% for block in section.blocks %}
                                <div class="swiper-slide product-card" 
                                     data-main-image="{{ block.settings.main_image | img_url: 'master' }}"
                                     data-main-image-url="{{ block.settings.main_image_url }}"
                                     data-slide-number="{{ forloop.index }}"
                                     {{ block.shopify_attributes }}>
                                    
                                    <!-- Card Image Section -->
                                    {% if block.settings.card_image %}
                                        <div class="card-image-section">
                                            {% if block.settings.card_image_url %}
                                                <a href="{{ block.settings.card_image_url }}" target="_blank" rel="noopener" class="card-image-link">
                                                    <img src="{{ block.settings.card_image | img_url: 'master' }}" alt="Product Image" class="card-image">
                                                </a>
                                            {% else %}
                                                <img src="{{ block.settings.card_image | img_url: 'master' }}" alt="Product Image" class="card-image">
                                            {% endif %}
                                        </div>
                                    {% endif %}

                                    <!-- Card Content Section -->
                                    <div class="card-content">
                                        {% if block.settings.heading %}
                                            <h2 class="card-title">{{ block.settings.heading }}</h2>
                                        {% endif %}
                                        {% if block.settings.text %}
                                            <p class="card-text">{{ block.settings.text }}</p>
                                        {% endif %}
                                        {% if block.settings.button_label and block.settings.button_link %}
                                            <a href="{{ block.settings.button_link }}" class="card-button">{{ block.settings.button_label }}</a>
                                        {% endif %}
                                    </div>
                                </div>
                            {% endfor %}
                        </div>

                        <!-- Navigation Controls -->
                        <div class="product-button-wrapper">
                            <div class="product-button-prev"></div>
                            <div class="product-button-next"></div>
                        </div>

                        <!-- Slide Counter -->
                        <div class="slide-counter">
                            <span class="current-slide">1</span> / <span class="total-slides">{{ section.blocks.size }}</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper@8/swiper-bundle.min.js"></script>

<script>
// Ultra-simple approach - just force arrows to show and work
(function() {
    'use strict';
    
    function makeAllArrowsWork() {
        // Find all carousel sections
        const carousels = document.querySelectorAll('.product-feature-carousel');
        console.log('Found', carousels.length, 'carousels');
        
        carousels.forEach((carousel, index) => {
            console.log('Processing carousel', index + 1);
            
            // Force all elements to be visible
            const card = carousel.querySelector('.feature-card');
            const wrapper = carousel.querySelector('.product-button-wrapper');
            const prevBtn = carousel.querySelector('.product-button-prev');
            const nextBtn = carousel.querySelector('.product-button-next');
            const swiperContainer = carousel.querySelector('.card-swiper');
            
            if (card) {
                card.style.setProperty('display', 'flex', 'important');
                card.style.setProperty('flex-direction', 'column', 'important');
                card.style.setProperty('visibility', 'visible', 'important');
                card.style.setProperty('opacity', '1', 'important');
            }
            
            if (wrapper) {
                wrapper.style.setProperty('display', 'flex', 'important');
                wrapper.style.setProperty('visibility', 'visible', 'important');
                wrapper.style.setProperty('opacity', '1', 'important');
            }
            
            [prevBtn, nextBtn].forEach(btn => {
                if (btn) {
                    btn.style.setProperty('display', 'flex', 'important');
                    btn.style.setProperty('visibility', 'visible', 'important');
                    btn.style.setProperty('opacity', '1', 'important');
                    btn.style.setProperty('width', '40px', 'important');
                    btn.style.setProperty('height', '40px', 'important');
                    btn.style.setProperty('background', '#f1f1f1', 'important');
                    btn.style.setProperty('border-radius', '50%', 'important');
                    btn.style.setProperty('justify-content', 'center', 'important');
                    btn.style.setProperty('align-items', 'center', 'important');
                    btn.style.setProperty('cursor', 'pointer', 'important');
                    btn.style.setProperty('border', '1px solid #e0e0e0', 'important');
                }
            });
            
            // Initialize Swiper for this specific carousel
            if (swiperContainer) {
                try {
                    const swiper = new Swiper(swiperContainer, {
                        slidesPerView: 1,
                        spaceBetween: 0,
                        navigation: {
                            nextEl: nextBtn,
                            prevEl: prevBtn,
                        },
                        loop: false,
                        effect: 'slide',
                        speed: 400,
                        allowTouchMove: true,
                        on: {
                            init: function() {
                                console.log('Swiper', index + 1, 'initialized');
                            },
                            slideChange: function() {
                                console.log('Swiper', index + 1, 'slide changed to:', this.activeIndex);
                                // Update main image if needed
                                updateMainImage(carousel, this.activeIndex);
                                updateCounter(carousel, this.activeIndex);
                            }
                        }
                    });
                    console.log('✅ Carousel', index + 1, 'initialized successfully');
                } catch (error) {
                    console.error('❌ Failed to initialize carousel', index + 1, error);
                }
            }
        });
    }
    
    function updateMainImage(carousel, slideIndex) {
        const slides = carousel.querySelectorAll('.swiper-slide[data-main-image]');
        const mainImage = carousel.querySelector('.main-image');
        
        if (slides[slideIndex] && mainImage) {
            const newImageUrl = slides[slideIndex].getAttribute('data-main-image');
            if (newImageUrl && newImageUrl !== mainImage.src) {
                mainImage.style.opacity = '0.3';
                setTimeout(() => {
                    mainImage.src = newImageUrl;
                    mainImage.style.opacity = '1';
                }, 150);
            }
        }
    }
    
    function updateCounter(carousel, slideIndex) {
        const counter = carousel.querySelector('.current-slide');
        if (counter) {
            counter.textContent = slideIndex + 1;
        }
    }
    
    // Run immediately
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', makeAllArrowsWork);
    } else {
        makeAllArrowsWork();
    }
    
    // Run after store changes
    document.addEventListener('storeChanged', () => {
        setTimeout(makeAllArrowsWork, 200);
    });
    
    document.addEventListener('storeUpdate', () => {
        setTimeout(makeAllArrowsWork, 200);
    });
    
    // Run periodically to catch any issues
    setInterval(makeAllArrowsWork, 2000);
})();
</script>
(function() {
    'use strict';
    
    // Namespace to avoid conflicts
    window.ProductCarousel = window.ProductCarousel || {};
    
    if (window.ProductCarousel.initialized) {
        return; // Already initialized
    }
    
    let carousels = [];

    function initCarousel(carouselElement, index) {
        console.log('Initializing carousel', index + 1);
        
        const mainImage = carouselElement.querySelector('.main-image');
        const swiperContainer = carouselElement.querySelector('.card-swiper');
        const slides = carouselElement.querySelectorAll('.swiper-slide[data-main-image]');
        
        if (!mainImage || !swiperContainer || slides.length === 0) {
            console.log('Carousel', index + 1, 'missing required elements');
            return;
        }

        // Force visibility
        carouselElement.style.display = 'block';
        carouselElement.style.visibility = 'visible';
        carouselElement.style.opacity = '1';

        // Collect slide data
        const slideData = Array.from(slides).map((slide, i) => ({
            imageUrl: slide.getAttribute('data-main-image'),
            linkUrl: slide.getAttribute('data-main-image-url'),
            slideNumber: i + 1
        }));

        // Initialize Swiper
        const swiper = new Swiper(swiperContainer, {
            slidesPerView: 1,
            spaceBetween: 0,
            navigation: {
                nextEl: carouselElement.querySelector('.product-button-next'),
                prevEl: carouselElement.querySelector('.product-button-prev'),
            },
            loop: false,
            effect: 'slide',
            speed: 400,
            allowTouchMove: true,
            on: {
                init: function() {
                    updateMainImage(0);
                    updateCounter(0);
                },
                slideChange: function() {
                    updateMainImage(this.activeIndex);
                    updateCounter(this.activeIndex);
                }
            }
        });

        function updateMainImage(index) {
            const slideInfo = slideData[index];
            if (slideInfo && slideInfo.imageUrl && slideInfo.imageUrl !== mainImage.src) {
                mainImage.style.opacity = '0.3';
                setTimeout(() => {
                    mainImage.src = slideInfo.imageUrl;
                    mainImage.style.opacity = '1';
                    updateLink(slideInfo.linkUrl);
                }, 150);
            }
        }

        function updateCounter(index) {
            const counterEl = carouselElement.querySelector('.current-slide');
            if (counterEl) {
                counterEl.textContent = index + 1;
            }
        }

        function updateLink(url) {
            const container = carouselElement.querySelector('.main-image-container');
            const existingLink = container.querySelector('.main-image-link');
            
            if (url && url.trim()) {
                if (existingLink) {
                    existingLink.href = url;
                } else {
                    const link = document.createElement('a');
                    link.href = url;
                    link.target = '_blank';
                    link.rel = 'noopener';
                    link.className = 'main-image-link';
                    mainImage.parentNode.insertBefore(link, mainImage);
                    link.appendChild(mainImage);
                }
            } else if (existingLink) {
                existingLink.parentNode.insertBefore(mainImage, existingLink);
                existingLink.remove();
            }
        }

        carousels.push({ element: carouselElement, swiper, slideData });
        console.log('Carousel', index + 1, 'initialized successfully');
    }

    function initAllCarousels() {
        // Clear existing carousels
        carousels.forEach(carousel => {
            if (carousel.swiper && carousel.swiper.destroy) {
                carousel.swiper.destroy(true, true);
            }
        });
        carousels = [];

        // Initialize all carousel instances
        const carouselElements = document.querySelectorAll('.product-feature-carousel');
        carouselElements.forEach((element, index) => {
            initCarousel(element, index);
        });
    }

    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initAllCarousels);
    } else {
        initAllCarousels();
    }

    // Re-initialize on store changes
    document.addEventListener('storeChanged', () => {
        setTimeout(initAllCarousels, 200);
    });

    document.addEventListener('storeUpdate', () => {
        setTimeout(initAllCarousels, 200);
    });

    window.ProductCarousel.initialized = true;
    window.ProductCarousel.carousels = carousels;
    window.ProductCarousel.init = initAllCarousels;
})();
</script>

{% schema %}
{
  "name": "Product Feature Carousel",
  "tag": "section",
  "class": "room-feature-carousel",
  "settings": [
    {
      "type": "select",
      "id": "store",
      "label": "Store",
      "info": "Populate this to show only on specific store",
      "options": [
        { "value": "all", "label": "Show On Both" },
        { "value": "explore all brands", "label": "Explore All Brands" },
        { "value": "quorum", "label": "Quorum" },
        { "value": "oxygen", "label": "Oxygen" }
      ],
      "default": "all"
    }
  ],
  "blocks": [
    {
      "type": "card_slide",
      "name": "Product Card",
      "settings": [
        {
          "type": "header",
          "content": "Main Large Image (Left Side)"
        },
        {
          "type": "image_picker",
          "id": "main_image",
          "label": "Main Large Image",
          "info": "This image displays on the left and changes with each card"
        },
        {
          "type": "url",
          "id": "main_image_url",
          "label": "Main Image URL",
          "info": "Make the main large image clickable - opens in new tab"
        },
        {
          "type": "header",
          "content": "Card Image (Right Side)"
        },
        {
          "type": "image_picker",
          "id": "card_image",
          "label": "Card Image",
          "info": "This image displays in the card on the right side"
        },
        {
          "type": "url",
          "id": "card_image_url",
          "label": "Card Image URL",
          "info": "Make the card image clickable - opens in new tab"
        },
        {
          "type": "header",
          "content": "Card Content"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading Text",
          "default": "Shop by Room: Dining"
        },
        {
          "type": "textarea",
          "id": "text",
          "label": "Paragraph Text",
          "default": "Designed to enhance every meal, our dining selection combines timeless style with thoughtful functionality."
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "Button Label",
          "default": "Explore Products"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Feature Carousel"
    }
  ]
}
{% endschema %}