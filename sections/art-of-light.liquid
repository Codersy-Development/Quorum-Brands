{{ 'custom-art-of-light.css' | asset_url | stylesheet_tag }}
<section
    class="art-of-light"
    {% unless section.settings.store == "all" %}
        data-store="{{ section.settings.store }}"
    {% endunless %}
>
    <div class="container">
        <div class="header">
            {% if section.settings.title %}
                <h2 class="title">{{ section.settings.title }}</h2>
            {% endif %}
            {% if section.settings.subtitle %}
                <p class="subtitle">{{ section.settings.subtitle }}</p>
            {% endif %}
        </div>

        <div class="colors">
            {% for block in section.blocks %}
                <div class="color-item{% if forloop.first %} active{% endif %}" data-color="{{ block.id }}">
                    {% if block.settings.icon %}
                        <img src="{{ block.settings.icon | img_url: 'small' }}" alt="{{ block.settings.label }}" class="color-icon">
                    {% endif %}
                    {% if block.settings.label %}
                        <p class="color-label">{{ block.settings.label }}</p>
                    {% endif %}
                </div>
            {% endfor %}
        </div>

        <div class="social-grid-wrapper">
            {% for block in section.blocks %}
                <div class="social-grid" id="gallery-{{ block.id }}" {% unless forloop.first %}style="display: none;"{% endunless %}>
                    {% for i in (1..8) %}
                        {% assign key = "image_" | append: i %}
                        {% assign url_key = "url_" | append: i %}
                        {% assign image = block.settings[key] %}
                        {% assign image_url = block.settings[url_key] %}
                        {% if image %}
                            <div class="social-item">
                                {% if image_url %}
                                    <a href="{{ image_url }}" target="_blank" rel="noopener" class="image-link">
                                        <img src="{{ image | img_url: '1024x1024' }}" alt="Social Image {{ i }}">
                                    </a>
                                {% else %}
                                    <img src="{{ image | img_url: '1024x1024' }}" alt="Social Image {{ i }}">
                                {% endif %}
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endfor %}
        </div>

        {% if section.settings.button_text and section.settings.button_link %}
            <div class="button-wrapper">
                <a href="{{ section.settings.button_link }}" class="cta-button">{{ section.settings.button_text }}</a>
            </div>
        {% endif %}
    </div>
</section>

<style>
.image-link {
    display: block;
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.image-link:hover {
    opacity: 0.9;
    transform: scale(1.02);
}

.social-item {
    cursor: pointer;
}

.social-item img {
    transition: transform 0.3s ease;
}

.image-link img {
    width: 100%;
    height: auto;
}

/* Active state styling for color items */
.color-item.active {
    opacity: 1;
    transform: scale(1.05);
}

.color-item {
    opacity: 0.7;
    transition: opacity 0.3s ease, transform 0.3s ease;
    cursor: pointer;
}

.color-item:hover {
    opacity: 1;
}

/* Auto-rotation visual feedback */
.color-item.active {
    position: relative;
}

.color-item.active::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 50%;
    transform: translateX(-50%);
    width: 30px;
    height: 2px;
    background: currentColor;
    opacity: 0.6;
    border-radius: 1px;
}

/* Smooth transitions for galleries */
.social-grid {
    transition: opacity 0.3s ease;
}

/* Loading indicator styling */
.loader {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #333;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    z-index: 10;
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

.social-grid-wrapper {
    position: relative;
    min-height: 300px;
}
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const colorItems = document.querySelectorAll('.art-of-light .color-item');
        const galleries = document.querySelectorAll('.art-of-light .social-grid');
        const wrapper = document.querySelector('.art-of-light .social-grid-wrapper');
        let currentIndex = 0;
        let autoRotateInterval;
        let isUserInteracting = false;
        let checkVisibilityInterval;
        let intersectionObserver;

        if (!colorItems.length || !galleries.length) return; // Exit if no content

        const loader = document.createElement('div');
        loader.classList.add('loader');
        wrapper.appendChild(loader);

        function showGallery(id, skipAnimation = false) {
            galleries.forEach(grid => {
                grid.style.display = 'none';
                grid.style.opacity = '0';
            });

            if (!skipAnimation && loader) {
                loader.style.display = 'block';
            }

            const delay = skipAnimation ? 0 : 500;
            
            setTimeout(() => {
                galleries.forEach(grid => {
                    if (grid.id === 'gallery-' + id) {
                        grid.style.display = 'block';
                        setTimeout(() => {
                            grid.style.opacity = '1';
                        }, 50);
                    }
                });
                if (!skipAnimation && loader) {
                    loader.style.display = 'none';
                }
            }, delay);

            colorItems.forEach(item => {
                item.classList.toggle('active', item.getAttribute('data-color') === id);
            });
        }

        function initializeGallery() {
            if (colorItems.length) {
                const firstColorId = colorItems[0].getAttribute('data-color');
                const firstGallery = document.getElementById('gallery-' + firstColorId);
                if (firstGallery) {
                    firstGallery.style.display = 'block';
                    firstGallery.style.opacity = '1';
                }
                console.log('🎨 Art of Light initialized with', colorItems.length, 'colors');
            }
        }

        function startAutoRotation() {
            if (colorItems.length <= 1) return; // No need to rotate if only one color
            
            // Clear any existing interval first
            stopAutoRotation();
            
            autoRotateInterval = setInterval(() => {
                // Check if section is visible before rotating
                const section = document.querySelector('.art-of-light');
                if (!section || section.style.display === 'none' || section.offsetParent === null) {
                    return; // Don't rotate if section is hidden
                }
                
                if (!isUserInteracting) {
                    currentIndex = (currentIndex + 1) % colorItems.length;
                    const nextColorId = colorItems[currentIndex].getAttribute('data-color');
                    showGallery(nextColorId, true); // Skip loading animation for auto-rotation
                    console.log(`🎯 Auto-rotated to color ${currentIndex + 1}/${colorItems.length}`);
                }
            }, 4000); // Change every 4 seconds
            
            console.log('🔄 Auto-rotation started');
        }

        function stopAutoRotation() {
            if (autoRotateInterval) {
                clearInterval(autoRotateInterval);
                autoRotateInterval = null;
                console.log('⏸️ Auto-rotation stopped');
            }
        }

        function restartAutoRotationIfVisible() {
            const section = document.querySelector('.art-of-light');
            if (section && section.style.display !== 'none' && section.offsetParent !== null) {
                console.log('👁️ Section became visible - restarting auto-rotation');
                setTimeout(() => {
                    if (!isUserInteracting) {
                        startAutoRotation();
                    }
                }, 1000); // Short delay to ensure section is fully visible
            }
        }

        function resetAutoRotation() {
            stopAutoRotation();
            setTimeout(() => {
                restartAutoRotationIfVisible();
            }, 8000); // Resume auto-rotation after 8 seconds of no interaction
        }

        // Initialize first gallery as visible and first color as active
        initializeGallery();

        // AGGRESSIVE STARTUP: Multiple attempts to start auto-rotation
        // Try immediately
        setTimeout(() => {
            const section = document.querySelector('.art-of-light');
            if (section && section.style.display !== 'none' && section.offsetParent !== null) {
                console.log('✅ Starting auto-rotation immediately - section is visible');
                startAutoRotation();
            } else {
                console.log('⏳ Section not visible yet - will keep trying');
            }
        }, 100);

        // Try again after potential script delays
        setTimeout(() => {
            if (!autoRotateInterval && !isUserInteracting) {
                const section = document.querySelector('.art-of-light');
                if (section && section.style.display !== 'none' && section.offsetParent !== null) {
                    console.log('✅ Starting auto-rotation (2nd attempt) - section is visible');
                    startAutoRotation();
                }
            }
        }, 500);

        // Final attempt for stubborn cases
        setTimeout(() => {
            if (!autoRotateInterval && !isUserInteracting) {
                const section = document.querySelector('.art-of-light');
                if (section && section.style.display !== 'none' && section.offsetParent !== null) {
                    console.log('✅ Starting auto-rotation (final attempt) - section is visible');
                    startAutoRotation();
                }
            }
        }, 1500);

        // Watch for section visibility changes (for store filtering)
        checkVisibilityInterval = setInterval(() => {
            const section = document.querySelector('.art-of-light');
            if (section && section.style.display !== 'none' && section.offsetParent !== null) {
                // Section is visible
                if (!autoRotateInterval && !isUserInteracting) {
                    console.log('🔍 Detected section is now visible - starting auto-rotation');
                    startAutoRotation();
                }
            } else {
                // Section is hidden
                if (autoRotateInterval) {
                    console.log('🙈 Section hidden - stopping auto-rotation');
                    stopAutoRotation();
                }
            }
        }, 500); // Check every 500ms (more frequent)

        // AGGRESSIVE: Multiple approaches to detect when section becomes visible
        
        // Method 1: MutationObserver to detect style changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                    const section = mutation.target.closest('.art-of-light');
                    if (section && section.style.display !== 'none') {
                        console.log('🔬 MutationObserver detected section became visible');
                        setTimeout(() => {
                            if (!autoRotateInterval && !isUserInteracting) {
                                startAutoRotation();
                            }
                        }, 100);
                    }
                }
            });
        });
        
        // Observe the art-of-light section for style changes
        const artSection = document.querySelector('.art-of-light');
        if (artSection) {
            observer.observe(artSection, { 
                attributes: true, 
                attributeFilter: ['style'] 
            });
        }

        // Method 2: Listen for store changes with multiple fallbacks
        const handleStoreChangeDetection = () => {
            console.log('🏪 Store change detected - checking section visibility');
            
            // Check immediately
            setTimeout(() => restartAutoRotationIfVisible(), 100);
            // Check again after potential delays from other scripts
            setTimeout(() => restartAutoRotationIfVisible(), 300);
            // Final check for stubborn cases
            setTimeout(() => restartAutoRotationIfVisible(), 800);
        };

        document.addEventListener('storeChanged', handleStoreChangeDetection);

        document.addEventListener('change', (e) => {
            if (e.target.type === 'radio' && e.target.closest('store-switcher')) {
                console.log('📻 Store radio changed - checking section visibility');
                handleStoreChangeDetection();
            }
        });

        // Method 3: Listen for any changes to localStorage (store changes)
        const originalSetItem = localStorage.setItem;
        localStorage.setItem = function(key, value) {
            originalSetItem.call(this, key, value);
            if (key === 'store-selected') {
                console.log('💾 localStorage store-selected changed - checking visibility');
                handleStoreChangeDetection();
            }
        };

        // Method 4: Intersection Observer as backup
        if ('IntersectionObserver' in window) {
            intersectionObserver = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting && entry.target.classList.contains('art-of-light')) {
                        console.log('👁️ IntersectionObserver detected section visible');
                        setTimeout(() => {
                            if (!autoRotateInterval && !isUserInteracting) {
                                startAutoRotation();
                            }
                        }, 200);
                    }
                });
            });
            
            if (artSection) {
                intersectionObserver.observe(artSection);
            }
        }

        // Stop all observers when page unloads
        window.addEventListener('beforeunload', () => {
            if (checkVisibilityInterval) clearInterval(checkVisibilityInterval);
            if (observer) observer.disconnect();
            if (intersectionObserver) intersectionObserver.disconnect();
            stopAutoRotation();
        });

        colorItems.forEach((item, index) => {
            item.addEventListener('click', function () {
                const colorId = this.getAttribute('data-color');
                currentIndex = index; // Update current index to clicked item
                
                // Stop auto-rotation temporarily when user clicks
                isUserInteracting = true;
                stopAutoRotation();
                
                showGallery(colorId);
                
                console.log(`👆 User clicked color ${index + 1}: ${colorId}`);
                
                // Resume auto-rotation after delay
                setTimeout(() => {
                    isUserInteracting = false;
                    resetAutoRotation();
                }, 10000); // Resume after 10 seconds
            });

            // Pause auto-rotation on hover
            item.addEventListener('mouseenter', () => {
                isUserInteracting = true;
            });

            item.addEventListener('mouseleave', () => {
                setTimeout(() => {
                    isUserInteracting = false;
                }, 500); // Small delay before resuming
            });
        });

        // Pause auto-rotation when hovering over the gallery area
        if (wrapper) {
            wrapper.addEventListener('mouseenter', () => {
                isUserInteracting = true;
            });

            wrapper.addEventListener('mouseleave', () => {
                setTimeout(() => {
                    isUserInteracting = false;
                }, 1000);
            });
        }

        // Pause auto-rotation when page is not visible
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                stopAutoRotation();
            } else {
                setTimeout(restartAutoRotationIfVisible, 2000);
            }
        });

        console.log('✨ Art of Light with ROBUST auto-rotation loaded successfully');
        console.log('🛡️ Using multiple detection methods: Interval, MutationObserver, IntersectionObserver, localStorage hook');
    });
</script>

{% schema %}
{
  "name": "Art of Light with Colors",
  "settings": [
    {
      "type": "select",
      "id": "store",
      "label": "Store",
      "info": "Populate this to show only on specific store",
      "options": [
        { "value": "all", "label": "Show On Both" },
        { "value": "all brands", "label": "All Brands" },
        { "value": "quorum", "label": "Quorum" },
        { "value": "oxygen", "label": "Oxygen" }
      ],
      "default": "all"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "The ART OF LIGHT"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Subtitle Paragraph",
      "default": "Our lighting, fans, and mirrors are the finishing touches that turn any room into a place you'll love. Each piece is crafted to be the color, shape, and style that brings your space to life. Explore some of our favorites below."
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "More Inspiration"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Button Link"
    }
  ],
  "blocks": [
    {
      "type": "color_images",
      "name": "Color + Images Block",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Color Label"
        },
        {
          "type": "image_picker",
          "id": "icon",
          "label": "Color Icon Image"
        },
        {
          "type": "image_picker",
          "id": "image_1",
          "label": "Image 1"
        },
        {
          "type": "url",
          "id": "url_1",
          "label": "Image 1 URL",
          "info": "Optional link for Image 1 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_2",
          "label": "Image 2"
        },
        {
          "type": "url",
          "id": "url_2",
          "label": "Image 2 URL",
          "info": "Optional link for Image 2 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_3",
          "label": "Image 3"
        },
        {
          "type": "url",
          "id": "url_3",
          "label": "Image 3 URL",
          "info": "Optional link for Image 3 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_4",
          "label": "Image 4"
        },
        {
          "type": "url",
          "id": "url_4",
          "label": "Image 4 URL",
          "info": "Optional link for Image 4 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_5",
          "label": "Image 5"
        },
        {
          "type": "url",
          "id": "url_5",
          "label": "Image 5 URL",
          "info": "Optional link for Image 5 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_6",
          "label": "Image 6"
        },
        {
          "type": "url",
          "id": "url_6",
          "label": "Image 6 URL",
          "info": "Optional link for Image 6 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_7",
          "label": "Image 7"
        },
        {
          "type": "url",
          "id": "url_7",
          "label": "Image 7 URL",
          "info": "Optional link for Image 7 - opens in new tab"
        },
        {
          "type": "image_picker",
          "id": "image_8",
          "label": "Image 8"
        },
        {
          "type": "url",
          "id": "url_8",
          "label": "Image 8 URL",
          "info": "Optional link for Image 8 - opens in new tab"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Art of Light Colors"
    }
  ]
}
{% endschema %}