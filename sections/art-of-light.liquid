/**
 * Universal Section Store Filter - DEBUG VERSION
 * Handles show/hide for all sections with data-store attributes
 * File: assets/universal-section-filter.js
 */
(function() {
    'use strict';
    
    function handleSectionStoreFiltering() {
        const selectedStore = localStorage.getItem("store-selected") || "";
        const sectionsWithStore = document.querySelectorAll('[data-store]');
        
        console.log('üîç [Universal Filter] Selected store:', selectedStore);
        console.log('üîç [Universal Filter] Found sections with data-store:', sectionsWithStore.length);
        
        // Check if "All Brands" is selected
        function isAllBrands(storeValue) {
            if (!storeValue) return false;
            const normalized = storeValue.toLowerCase().trim();
            return normalized === 'all brands';
        }
        
        sectionsWithStore.forEach((section, index) => {
            const sectionStore = section.getAttribute('data-store');
            
            console.log(`üìã Section ${index + 1}:`, {
                sectionStore: sectionStore,
                selectedStore: selectedStore,
                sectionClass: section.className || section.tagName
            });
            
            // If section is set to show on all stores, always show
            if (!sectionStore || sectionStore === 'all') {
                section.style.display = '';
                console.log(`‚úÖ Section ${index + 1}: SHOWN (set to 'all')`);
                return;
            }
            
            // Check if "All Brands" is selected
            if (isAllBrands(selectedStore)) {
                section.style.display = '';
                console.log(`‚úÖ Section ${index + 1}: SHOWN (All Brands selected)`);
                return;
            }
            
            // Show section if selected store matches section store
            const storeMatches = selectedStore.toLowerCase() === sectionStore.toLowerCase();
            const shouldShow = storeMatches || selectedStore === '';
            
            console.log(`üîç Section ${index + 1} comparison:`, {
                selectedLower: selectedStore.toLowerCase(),
                sectionLower: sectionStore.toLowerCase(),
                storeMatches: storeMatches,
                shouldShow: shouldShow
            });
            
            section.style.display = shouldShow ? '' : 'none';
            
            if (shouldShow) {
                console.log(`‚úÖ Section ${index + 1}: SHOWN (store match)`);
            } else {
                console.log(`‚ùå Section ${index + 1}: HIDDEN (no match)`);
            }
        });
        
        console.log('üèÅ [Universal Filter] Processing complete');
    }
    
    function initializeSectionStoreFiltering() {
        // Listen for store changes
        document.addEventListener('storeChanged', function(e) {
            console.log('[Universal Filter] Store changed via custom event');
            setTimeout(handleSectionStoreFiltering, 100);
        });

        // Also listen for the regular change events as backup
        document.addEventListener('change', function(e) {
            if (e.target.type === 'radio' && e.target.closest('store-switcher')) {
                console.log('[Universal Filter] Store changed via radio button');
                setTimeout(handleSectionStoreFiltering, 150);
            }
        });

        // Initial check
        setTimeout(handleSectionStoreFiltering, 100);
        
        console.log('[Universal Filter] Initialized - monitoring', document.querySelectorAll('[data-store]').length, 'sections');
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeSectionStoreFiltering);
    } else {
        initializeSectionStoreFiltering();
    }
    
})();