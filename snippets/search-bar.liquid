{%- unless search_btn_style -%}
  {%- assign search_btn_style = 'btn' -%}
{%- endunless -%}
<form action="{{ routes.search_url }}" method="get" class="input-group search-bar {{ search_bar_location }}" role="search">
  <label for="search-bar-icon" class="hidden-label">{{ 'general.search.submit' | t }}</label>
  <input type="hidden" name="type" value="{{ settings.search_type }}">
  <input type="hidden" name="options[prefix]" value="last">
  <input type="search" name="q" value="{{ search.terms | escape | replace: '*', '' }}" placeholder="{{ 'general.search.placeholder' | t }}" class="input-group-field" aria-label="{{ 'general.search.placeholder' | t }}">
  <div class="input-group-btn">
    <button type="submit" id="search-bar-icon" class="{{ search_btn_style }}">
      <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-search" viewBox="0 0 64 64"><title>icon-search</title><path d="M47.16 28.58A18.58 18.58 0 1 1 28.58 10a18.58 18.58 0 0 1 18.58 18.58ZM54 54 41.94 42"/></svg>
      <span class="icon__fallback-text">{{ 'general.search.submit' | t }}</span>
    </button>
  </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let selectedStore = '';

  console.log('Store switcher script loaded');

  // Function to get selected store from store switcher
  function getSelectedStore() {
    const checkedStoreRadio = document.querySelector('store-switcher input[type="radio"]:checked');
    if (checkedStoreRadio) {
      console.log('Found selected store:', checkedStoreRadio.value);
      return checkedStoreRadio.value;
    }
    return '';
  }

  // Function to check/uncheck vendor filter based on selected store
  function updateVendorFilter() {
    selectedStore = getSelectedStore();
    console.log('Updating vendor filter for store:', selectedStore);
    
    if (selectedStore) {
      // Uncheck all vendor filters first
      const vendorCheckboxes = document.querySelectorAll('input[name="filter.p.vendor"]');
      vendorCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
      });

      // Check the vendor filter that matches the selected store
      const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
      const targetVendorCheckbox = document.querySelector(`input[name="filter.p.vendor"][value="${capitalizedStore}"]`);
      
      if (targetVendorCheckbox) {
        targetVendorCheckbox.checked = true;
        console.log('Checked vendor filter for:', capitalizedStore);
        
        // Trigger change event to update the search results
        targetVendorCheckbox.dispatchEvent(new Event('change', { bubbles: true }));
      }
    }
  }

  // Function to update search placeholder
  function updateSearchPlaceholder() {
    const searchInputs = document.querySelectorAll('input[type="search"][name="q"]');
    const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
    
    searchInputs.forEach(input => {
      if (selectedStore) {
        input.placeholder = `Search ${capitalizedStore} products...`;
      } else {
        input.placeholder = "{{ 'general.search.placeholder' | t }}";
      }
    });
  }

  // Listen for store switcher changes
  document.addEventListener('change', function(e) {
    // Check if the changed element is a store switcher radio
    if (e.target.matches('store-switcher input[type="radio"]') || 
        (e.target.type === 'radio' && e.target.closest('store-switcher'))) {
      
      selectedStore = e.target.value;
      console.log('Store changed to:', selectedStore);
      
      // Update vendor filter and search placeholder
      updateVendorFilter();
      updateSearchPlaceholder();
      
      // Store selected store for persistence
      localStorage.setItem('selectedStore', selectedStore);
    }
  });

  // Initialize with selected store
  setTimeout(function() {
    selectedStore = getSelectedStore();
    if (selectedStore) {
      console.log('Initializing with store:', selectedStore);
      updateVendorFilter();
      updateSearchPlaceholder();
    }
  }, 200);
});
</script>