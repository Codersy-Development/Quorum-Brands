{%- unless search_btn_style -%}
  {%- assign search_btn_style = 'btn' -%}
{%- endunless -%}
<form action="{{ routes.search_url }}" method="get" class="input-group search-bar {{ search_bar_location }}" role="search">
  <label for="search-bar-icon" class="hidden-label">{{ 'general.search.submit' | t }}</label>
  <input type="hidden" name="type" value="{{ settings.search_type }}">
  <input type="hidden" name="options[prefix]" value="last">
  <input type="search" name="q" value="{{ search.terms | escape | replace: '*', '' }}" placeholder="{{ 'general.search.placeholder' | t }}" class="input-group-field" aria-label="{{ 'general.search.placeholder' | t }}">
  <div class="input-group-btn">
    <button type="submit" id="search-bar-icon" class="{{ search_btn_style }}">
      <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-search" viewBox="0 0 64 64"><title>icon-search</title><path d="M47.16 28.58A18.58 18.58 0 1 1 28.58 10a18.58 18.58 0 0 1 18.58 18.58ZM54 54 41.94 42"/></svg>
      <span class="icon__fallback-text">{{ 'general.search.submit' | t }}</span>
    </button>
  </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let selectedStore = '';

  console.log('=== STORE SWITCHER DEBUG SCRIPT LOADED ===');

  // Debug: Check what elements exist
  setTimeout(function() {
    const storeSwitcher = document.querySelector('store-switcher');
    const storeRadios = document.querySelectorAll('store-switcher input[type="radio"]');
    const vendorCheckboxes = document.querySelectorAll('input[name="filter.p.vendor"]');
    
    console.log('Store switcher element found:', !!storeSwitcher);
    console.log('Store radio buttons found:', storeRadios.length);
    console.log('Vendor filter checkboxes found:', vendorCheckboxes.length);
    
    storeRadios.forEach((radio, index) => {
      console.log(`Radio ${index + 1}:`, radio.value, 'checked:', radio.checked);
    });
    
    vendorCheckboxes.forEach((checkbox, index) => {
      console.log(`Vendor checkbox ${index + 1}:`, checkbox.value, 'checked:', checkbox.checked);
    });
  }, 500);

  // Function to get selected store from store switcher
  function getSelectedStore() {
    const checkedStoreRadio = document.querySelector('store-switcher input[type="radio"]:checked');
    if (checkedStoreRadio) {
      console.log('âœ“ Found selected store:', checkedStoreRadio.value);
      return checkedStoreRadio.value;
    }
    console.log('âœ— No selected store found');
    return '';
  }

  // Function to check/uncheck vendor filter based on selected store
  function updateVendorFilter() {
    selectedStore = getSelectedStore();
    console.log('=== UPDATING VENDOR FILTER ===');
    console.log('Selected store:', selectedStore);
    
    if (selectedStore) {
      // Uncheck ALL vendor filters first (handle duplicates)
      const vendorCheckboxes = document.querySelectorAll('input[name="filter.p.vendor"]');
      console.log('Found', vendorCheckboxes.length, 'vendor checkboxes to uncheck');
      
      vendorCheckboxes.forEach((checkbox, index) => {
        checkbox.checked = false;
        console.log(`Unchecked vendor checkbox ${index + 1}:`, checkbox.value);
      });

      // Check ALL vendor filters that match the selected store (handle duplicates)
      const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
      const targetVendorCheckboxes = document.querySelectorAll(`input[name="filter.p.vendor"][value="${capitalizedStore}"]`);
      
      console.log(`Looking for vendor checkboxes with value "${capitalizedStore}"`);
      console.log(`Found ${targetVendorCheckboxes.length} matching vendor checkboxes`);
      
      targetVendorCheckboxes.forEach((checkbox, index) => {
        checkbox.checked = true;
        console.log(`âœ“ Checked vendor filter ${index + 1} for:`, capitalizedStore);
        
        // Trigger change event on each checkbox
        checkbox.dispatchEvent(new Event('change', { bubbles: true }));
        console.log(`âœ“ Triggered change event on checkbox ${index + 1}`);
      });
      
      // Force form submission or filter update if needed
      const form = document.querySelector('form[action*="search"]');
      if (form) {
        console.log('Found search form, considering triggering update...');
        // Uncomment the next line if you need to force form submission
        // form.requestSubmit();
      }
    }
    console.log('=== VENDOR FILTER UPDATE COMPLETE ===');
  }

  // Function to update search placeholder
  function updateSearchPlaceholder() {
    const searchInputs = document.querySelectorAll('input[type="search"][name="q"]');
    const capitalizedStore = selectedStore ? selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1) : '';
    
    console.log('Updating', searchInputs.length, 'search input placeholders');
    
    searchInputs.forEach((input, index) => {
      if (selectedStore) {
        input.placeholder = `Search ${capitalizedStore} products...`;
        console.log(`Updated search input ${index + 1} placeholder to: Search ${capitalizedStore} products...`);
      } else {
        input.placeholder = "{{ 'general.search.placeholder' | t }}";
      }
    });
  }

  // Listen for ALL change events and log them
  document.addEventListener('change', function(e) {
    console.log('=== CHANGE EVENT DETECTED ===');
    console.log('Element that changed:', e.target);
    console.log('Element type:', e.target.type);
    console.log('Element name:', e.target.name);
    console.log('Element value:', e.target.value);
    console.log('Is inside store-switcher:', !!e.target.closest('store-switcher'));
    
    // Check if the changed element is a store switcher radio
    if (e.target.matches('store-switcher input[type="radio"]') || 
        (e.target.type === 'radio' && e.target.closest('store-switcher'))) {
      
      console.log('ðŸŽ¯ STORE SWITCHER RADIO CHANGED!');
      selectedStore = e.target.value;
      console.log('New selected store:', selectedStore);
      
      // Update vendor filter and search placeholder
      updateVendorFilter();
      updateSearchPlaceholder();
      
      // Store selected store for persistence
      localStorage.setItem('selectedStore', selectedStore);
      console.log('Stored in localStorage:', selectedStore);
    }
    
    // Also log vendor checkbox changes
    if (e.target.name === 'filter.p.vendor') {
      console.log('ðŸ“¦ VENDOR FILTER CHANGED:', e.target.value, 'checked:', e.target.checked);
    }
  });

  // Initialize with selected store
  setTimeout(function() {
    console.log('=== INITIALIZING ===');
    selectedStore = getSelectedStore();
    if (selectedStore) {
      console.log('Initializing with store:', selectedStore);
      updateVendorFilter();
      updateSearchPlaceholder();
    } else {
      console.log('No store selected during initialization');
    }
  }, 300);
});
</script>