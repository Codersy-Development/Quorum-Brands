{%- unless search_btn_style -%}
  {%- assign search_btn_style = 'btn' -%}
{%- endunless -%}
<form action="{{ routes.search_url }}" method="get" class="input-group search-bar {{ search_bar_location }}" role="search" id="brand-search-form">
  <label for="search-bar-icon" class="hidden-label">{{ 'general.search.submit' | t }}</label>
  <input type="hidden" name="type" value="{{ settings.search_type }}">
  <input type="hidden" name="options[prefix]" value="last">
  <input type="hidden" id="vendor-filter" name="q" value="">
  <input type="search" id="search-input" name="q" value="{{ search.terms | escape | replace: '*', '' }}" placeholder="{{ 'general.search.placeholder' | t }}" class="input-group-field" aria-label="{{ 'general.search.placeholder' | t }}">
  <div class="input-group-btn">
    <button type="submit" id="search-bar-icon" class="{{ search_btn_style }}">
      <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-search" viewBox="0 0 64 64"><title>icon-search</title><path d="M47.16 28.58A18.58 18.58 0 1 1 28.58 10a18.58 18.58 0 0 1 18.58 18.58ZM54 54 41.94 42"/></svg>
      <span class="icon__fallback-text">{{ 'general.search.submit' | t }}</span>
    </button>
  </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchForm = document.getElementById('brand-search-form');
  const searchInput = document.getElementById('search-input');
  let selectedStore = '';

  // Function to get selected store from store switcher
  function getSelectedStore() {
    // Find the checked radio button in the store switcher
    const checkedStoreRadio = document.querySelector('store-switcher input[type="radio"]:checked');
    if (checkedStoreRadio) {
      return checkedStoreRadio.value;
    }
    
    // Fallback: get first store if none selected
    const firstStoreRadio = document.querySelector('store-switcher input[type="radio"]');
    if (firstStoreRadio) {
      return firstStoreRadio.value;
    }
    
    return '';
  }

  // Function to update search query with store filter
  function updateSearchQuery() {
    selectedStore = getSelectedStore();
    
    if (selectedStore && selectedStore !== '') {
      // Get the original user query without any existing vendor filters
      let currentQuery = searchInput.value.trim();
      
      // Remove any existing vendor filters from previous searches
      currentQuery = currentQuery.replace(/vendor:\S+/g, '').trim();
      
      // Capitalize first letter of store name for vendor filter
      const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
      const storeFilter = `vendor:${capitalizedStore}`;
      
      // Combine user query with store filter
      if (currentQuery) {
        searchInput.value = `${currentQuery} ${storeFilter}`;
      } else {
        searchInput.value = storeFilter;
      }
    }
  }

  // Listen for store switcher changes
  document.addEventListener('change', function(e) {
    if (e.target.matches('store-switcher input[type="radio"]')) {
      selectedStore = e.target.value;
      
      // Update search placeholder to show selected store
      const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
      searchInput.placeholder = `Search ${capitalizedStore} products...`;
      
      // Store selected store for persistence
      localStorage.setItem('selectedStore', selectedStore);
    }
  });

  // Update search query before form submission
  searchForm.addEventListener('submit', function(e) {
    updateSearchQuery();
  });

  // Initialize with selected store
  selectedStore = getSelectedStore();
  if (selectedStore && selectedStore !== '') {
    const capitalizedStore = selectedStore.charAt(0).toUpperCase() + selectedStore.slice(1);
    searchInput.placeholder = `Search ${capitalizedStore} products...`;
  }
});
</script>
